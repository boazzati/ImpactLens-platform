import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import PptxGenJS from 'pptxgenjs';
import { saveAs } from 'file-saver';

// Export analysis results to PDF
export const exportToPDF = async (analysisResult, scenarioData) => {
  try {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    
    // Add ImpactLens header
    pdf.setFontSize(24);
    pdf.setTextColor(212, 175, 55); // Gold color
    pdf.text('ImpactLens Partnership Analysis Report', 20, 30);
    
    // Add date
    pdf.setFontSize(12);
    pdf.setTextColor(100, 100, 100);
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 45);
    
    // Add scenario details
    pdf.setFontSize(16);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Partnership Scenario', 20, 65);
    
    pdf.setFontSize(12);
    let yPos = 80;
    
    if (scenarioData.brandA) {
      pdf.text(`Brand A: ${scenarioData.brandA}`, 20, yPos);
      yPos += 15;
    }
    
    if (scenarioData.brandB) {
      pdf.text(`Brand B: ${scenarioData.brandB}`, 20, yPos);
      yPos += 15;
    }
    
    if (scenarioData.partnershipType) {
      pdf.text(`Partnership Type: ${scenarioData.partnershipType}`, 20, yPos);
      yPos += 15;
    }
    
    if (scenarioData.targetAudience) {
      pdf.text(`Target Audience: ${scenarioData.targetAudience}`, 20, yPos);
      yPos += 15;
    }
    
    if (scenarioData.budget) {
      pdf.text(`Budget Range: ${scenarioData.budget}`, 20, yPos);
      yPos += 15;
    }
    
    // Add analysis results
    if (analysisResult && analysisResult.analysis) {
      yPos += 10;
      pdf.setFontSize(16);
      pdf.text('Analysis Results', 20, yPos);
      yPos += 20;
      
      pdf.setFontSize(12);
      
      // Key metrics
      if (analysisResult.analysis.brand_alignment_score) {
        pdf.text(`Brand Alignment Score: ${analysisResult.analysis.brand_alignment_score}`, 20, yPos);
        yPos += 15;
      }
      
      if (analysisResult.analysis.audience_overlap_percentage) {
        pdf.text(`Audience Overlap: ${analysisResult.analysis.audience_overlap_percentage}%`, 20, yPos);
        yPos += 15;
      }
      
      if (analysisResult.analysis.roi_projection) {
        pdf.text(`ROI Projection: ${analysisResult.analysis.roi_projection}%`, 20, yPos);
        yPos += 15;
      }
      
      if (analysisResult.analysis.risk_level) {
        pdf.text(`Risk Level: ${analysisResult.analysis.risk_level}`, 20, yPos);
        yPos += 15;
      }
      
      // Recommendations
      if (analysisResult.analysis.recommendations && analysisResult.analysis.recommendations.length > 0) {
        yPos += 10;
        pdf.setFontSize(14);
        pdf.text('Recommendations:', 20, yPos);
        yPos += 15;
        
        pdf.setFontSize(11);
        analysisResult.analysis.recommendations.forEach((rec, index) => {
          const lines = pdf.splitTextToSize(`• ${rec}`, pageWidth - 40);
          lines.forEach(line => {
            if (yPos > pageHeight - 30) {
              pdf.addPage();
              yPos = 30;
            }
            pdf.text(line, 25, yPos);
            yPos += 12;
          });
        });
      }
      
      // Key Risks
      if (analysisResult.analysis.key_risks && analysisResult.analysis.key_risks.length > 0) {
        yPos += 10;
        pdf.setFontSize(14);
        pdf.text('Key Risks:', 20, yPos);
        yPos += 15;
        
        pdf.setFontSize(11);
        analysisResult.analysis.key_risks.forEach((risk, index) => {
          const lines = pdf.splitTextToSize(`• ${risk}`, pageWidth - 40);
          lines.forEach(line => {
            if (yPos > pageHeight - 30) {
              pdf.addPage();
              yPos = 30;
            }
            pdf.text(line, 25, yPos);
            yPos += 12;
          });
        });
      }
      
      // Market Insights
      if (analysisResult.analysis.market_insights && analysisResult.analysis.market_insights.length > 0) {
        yPos += 10;
        pdf.setFontSize(14);
        pdf.text('Market Insights:', 20, yPos);
        yPos += 15;
        
        pdf.setFontSize(11);
        analysisResult.analysis.market_insights.forEach((insight, index) => {
          const lines = pdf.splitTextToSize(`• ${insight}`, pageWidth - 40);
          lines.forEach(line => {
            if (yPos > pageHeight - 30) {
              pdf.addPage();
              yPos = 30;
            }
            pdf.text(line, 25, yPos);
            yPos += 12;
          });
        });
      }
    }
    
    // Add footer
    pdf.setFontSize(10);
    pdf.setTextColor(150, 150, 150);
    pdf.text('Generated by ImpactLens Partnership Intelligence Platform', 20, pageHeight - 20);
    
    // Save the PDF
    const fileName = `ImpactLens_Analysis_${scenarioData.brandA || 'Brand'}_${scenarioData.brandB || 'Partner'}_${new Date().toISOString().split('T')[0]}.pdf`;
    pdf.save(fileName);
    
    return { success: true, fileName };
  } catch (error) {
    console.error('PDF export failed:', error);
    return { success: false, error: error.message };
  }
};

// Export analysis results to PowerPoint
export const exportToPowerPoint = async (analysisResult, scenarioData) => {
  try {
    const pptx = new PptxGenJS();
    
    // Set presentation properties
    pptx.author = 'ImpactLens Platform';
    pptx.company = 'ImpactLens';
    pptx.title = 'Partnership Analysis Report';
    pptx.subject = 'Partnership Intelligence Analysis';
    
    // Slide 1: Title Slide
    const slide1 = pptx.addSlide();
    slide1.background = { color: 'FFFFFF' };
    
    slide1.addText('ImpactLens Partnership Analysis', {
      x: 1,
      y: 2,
      w: 8,
      h: 1.5,
      fontSize: 36,
      color: 'D4AF37',
      bold: true,
      align: 'center'
    });
    
    slide1.addText(`${scenarioData.brandA || 'Brand A'} × ${scenarioData.brandB || 'Brand B'}`, {
      x: 1,
      y: 3.5,
      w: 8,
      h: 1,
      fontSize: 24,
      color: '333333',
      align: 'center'
    });
    
    slide1.addText(`Generated on ${new Date().toLocaleDateString()}`, {
      x: 1,
      y: 5,
      w: 8,
      h: 0.5,
      fontSize: 14,
      color: '666666',
      align: 'center'
    });
    
    // Slide 2: Scenario Overview
    const slide2 = pptx.addSlide();
    slide2.background = { color: 'FFFFFF' };
    
    slide2.addText('Partnership Scenario Overview', {
      x: 0.5,
      y: 0.5,
      w: 9,
      h: 1,
      fontSize: 28,
      color: 'D4AF37',
      bold: true
    });
    
    let yPos = 1.8;
    const scenarioDetails = [
      { label: 'Brand A', value: scenarioData.brandA },
      { label: 'Brand B', value: scenarioData.brandB },
      { label: 'Partnership Type', value: scenarioData.partnershipType },
      { label: 'Target Audience', value: scenarioData.targetAudience },
      { label: 'Budget Range', value: scenarioData.budget }
    ];
    
    scenarioDetails.forEach(detail => {
      if (detail.value) {
        slide2.addText(`${detail.label}:`, {
          x: 1,
          y: yPos,
          w: 3,
          h: 0.5,
          fontSize: 16,
          color: '333333',
          bold: true
        });
        
        slide2.addText(detail.value, {
          x: 4,
          y: yPos,
          w: 5,
          h: 0.5,
          fontSize: 16,
          color: '666666'
        });
        
        yPos += 0.7;
      }
    });
    
    // Slide 3: Key Metrics
    if (analysisResult && analysisResult.analysis) {
      const slide3 = pptx.addSlide();
      slide3.background = { color: 'FFFFFF' };
      
      slide3.addText('Key Analysis Metrics', {
        x: 0.5,
        y: 0.5,
        w: 9,
        h: 1,
        fontSize: 28,
        color: 'D4AF37',
        bold: true
      });
      
      // Create metrics boxes
      const metrics = [
        { 
          label: 'Brand Alignment Score', 
          value: analysisResult.analysis.brand_alignment_score || 'N/A',
          x: 1, y: 2, color: 'E6C547'
        },
        { 
          label: 'Audience Overlap', 
          value: `${analysisResult.analysis.audience_overlap_percentage || 'N/A'}%`,
          x: 5.5, y: 2, color: 'B8941F'
        },
        { 
          label: 'ROI Projection', 
          value: `${analysisResult.analysis.roi_projection || 'N/A'}%`,
          x: 1, y: 4, color: 'D4AF37'
        },
        { 
          label: 'Risk Level', 
          value: analysisResult.analysis.risk_level || 'N/A',
          x: 5.5, y: 4, color: 'C5A632'
        }
      ];
      
      metrics.forEach(metric => {
        // Background box
        slide3.addShape(pptx.ShapeType.rect, {
          x: metric.x,
          y: metric.y,
          w: 3.5,
          h: 1.5,
          fill: { color: metric.color, transparency: 20 },
          line: { color: metric.color, width: 2 }
        });
        
        // Value
        slide3.addText(metric.value, {
          x: metric.x,
          y: metric.y + 0.2,
          w: 3.5,
          h: 0.8,
          fontSize: 24,
          color: '333333',
          bold: true,
          align: 'center'
        });
        
        // Label
        slide3.addText(metric.label, {
          x: metric.x,
          y: metric.y + 1,
          w: 3.5,
          h: 0.5,
          fontSize: 12,
          color: '666666',
          align: 'center'
        });
      });
      
      // Slide 4: Recommendations
      if (analysisResult.analysis.recommendations && analysisResult.analysis.recommendations.length > 0) {
        const slide4 = pptx.addSlide();
        slide4.background = { color: 'FFFFFF' };
        
        slide4.addText('Strategic Recommendations', {
          x: 0.5,
          y: 0.5,
          w: 9,
          h: 1,
          fontSize: 28,
          color: 'D4AF37',
          bold: true
        });
        
        let recYPos = 1.8;
        analysisResult.analysis.recommendations.slice(0, 5).forEach((rec, index) => {
          slide4.addText(`${index + 1}.`, {
            x: 1,
            y: recYPos,
            w: 0.5,
            h: 0.5,
            fontSize: 16,
            color: 'D4AF37',
            bold: true
          });
          
          slide4.addText(rec, {
            x: 1.5,
            y: recYPos,
            w: 7.5,
            h: 0.8,
            fontSize: 14,
            color: '333333',
            wrap: true
          });
          
          recYPos += 1;
        });
      }
      
      // Slide 5: Risks and Insights
      if ((analysisResult.analysis.key_risks && analysisResult.analysis.key_risks.length > 0) ||
          (analysisResult.analysis.market_insights && analysisResult.analysis.market_insights.length > 0)) {
        const slide5 = pptx.addSlide();
        slide5.background = { color: 'FFFFFF' };
        
        slide5.addText('Risks & Market Insights', {
          x: 0.5,
          y: 0.5,
          w: 9,
          h: 1,
          fontSize: 28,
          color: 'D4AF37',
          bold: true
        });
        
        let contentYPos = 1.8;
        
        // Key Risks
        if (analysisResult.analysis.key_risks && analysisResult.analysis.key_risks.length > 0) {
          slide5.addText('Key Risks:', {
            x: 1,
            y: contentYPos,
            w: 8,
            h: 0.5,
            fontSize: 18,
            color: 'C5A632',
            bold: true
          });
          contentYPos += 0.7;
          
          analysisResult.analysis.key_risks.slice(0, 3).forEach((risk, index) => {
            slide5.addText(`• ${risk}`, {
              x: 1.5,
              y: contentYPos,
              w: 7.5,
              h: 0.6,
              fontSize: 12,
              color: '333333',
              wrap: true
            });
            contentYPos += 0.7;
          });
          
          contentYPos += 0.3;
        }
        
        // Market Insights
        if (analysisResult.analysis.market_insights && analysisResult.analysis.market_insights.length > 0) {
          slide5.addText('Market Insights:', {
            x: 1,
            y: contentYPos,
            w: 8,
            h: 0.5,
            fontSize: 18,
            color: 'B8941F',
            bold: true
          });
          contentYPos += 0.7;
          
          analysisResult.analysis.market_insights.slice(0, 3).forEach((insight, index) => {
            slide5.addText(`• ${insight}`, {
              x: 1.5,
              y: contentYPos,
              w: 7.5,
              h: 0.6,
              fontSize: 12,
              color: '333333',
              wrap: true
            });
            contentYPos += 0.7;
          });
        }
      }
    }
    
    // Save the PowerPoint
    const fileName = `ImpactLens_Analysis_${scenarioData.brandA || 'Brand'}_${scenarioData.brandB || 'Partner'}_${new Date().toISOString().split('T')[0]}.pptx`;
    await pptx.writeFile({ fileName });
    
    return { success: true, fileName };
  } catch (error) {
    console.error('PowerPoint export failed:', error);
    return { success: false, error: error.message };
  }
};

// Export dashboard charts as images for reports
export const exportChartsAsImages = async () => {
  try {
    const charts = document.querySelectorAll('.recharts-wrapper');
    const images = [];
    
    for (let i = 0; i < charts.length; i++) {
      const chart = charts[i];
      const canvas = await html2canvas(chart, {
        backgroundColor: '#ffffff',
        scale: 2,
        logging: false
      });
      
      images.push({
        dataUrl: canvas.toDataURL('image/png'),
        name: `chart_${i + 1}.png`
      });
    }
    
    return images;
  } catch (error) {
    console.error('Chart export failed:', error);
    return [];
  }
};
