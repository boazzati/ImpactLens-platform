// Share analysis results via different platforms

// Generate a summary text for sharing
export const generateShareSummary = (analysisResult, scenarioData) => {
  const brandA = scenarioData.brandA || 'Brand A';
  const brandB = scenarioData.brandB || 'Brand B';
  
  let summary = `🤝 ImpactLens Partnership Analysis: ${brandA} × ${brandB}\n\n`;
  
  if (analysisResult && analysisResult.analysis) {
    const analysis = analysisResult.analysis;
    
    summary += `📊 Key Metrics:\n`;
    if (analysis.brand_alignment_score) {
      summary += `• Brand Alignment: ${analysis.brand_alignment_score}\n`;
    }
    if (analysis.audience_overlap_percentage) {
      summary += `• Audience Overlap: ${analysis.audience_overlap_percentage}%\n`;
    }
    if (analysis.roi_projection) {
      summary += `• ROI Projection: ${analysis.roi_projection}%\n`;
    }
    if (analysis.risk_level) {
      summary += `• Risk Level: ${analysis.risk_level}\n`;
    }
    
    if (analysis.recommendations && analysis.recommendations.length > 0) {
      summary += `\n💡 Top Recommendations:\n`;
      analysis.recommendations.slice(0, 2).forEach((rec, index) => {
        summary += `${index + 1}. ${rec}\n`;
      });
    }
  }
  
  summary += `\n🔗 Generated by ImpactLens Partnership Intelligence Platform`;
  
  return summary;
};

// Share via email
export const shareViaEmail = (analysisResult, scenarioData) => {
  const subject = `Partnership Analysis: ${scenarioData.brandA || 'Brand A'} × ${scenarioData.brandB || 'Brand B'}`;
  const body = generateShareSummary(analysisResult, scenarioData);
  
  const emailBody = encodeURIComponent(body.replace(/\n/g, '%0D%0A'));
  const emailSubject = encodeURIComponent(subject);
  
  const mailtoLink = `mailto:?subject=${emailSubject}&body=${emailBody}`;
  
  try {
    window.open(mailtoLink, '_blank');
    return { success: true, platform: 'email' };
  } catch (error) {
    console.error('Email sharing failed:', error);
    return { success: false, error: error.message, platform: 'email' };
  }
};

// Share via Microsoft Teams
export const shareViaTeams = (analysisResult, scenarioData) => {
  const summary = generateShareSummary(analysisResult, scenarioData);
  const encodedText = encodeURIComponent(summary);
  
  // Microsoft Teams deep link format
  const teamsUrl = `https://teams.microsoft.com/share?msgText=${encodedText}`;
  
  try {
    window.open(teamsUrl, '_blank', 'width=600,height=400');
    return { success: true, platform: 'teams' };
  } catch (error) {
    console.error('Teams sharing failed:', error);
    return { success: false, error: error.message, platform: 'teams' };
  }
};

// Share via WhatsApp
export const shareViaWhatsApp = (analysisResult, scenarioData) => {
  const summary = generateShareSummary(analysisResult, scenarioData);
  const encodedText = encodeURIComponent(summary);
  
  // WhatsApp Web URL format
  const whatsappUrl = `https://wa.me/?text=${encodedText}`;
  
  try {
    window.open(whatsappUrl, '_blank', 'width=600,height=400');
    return { success: true, platform: 'whatsapp' };
  } catch (error) {
    console.error('WhatsApp sharing failed:', error);
    return { success: false, error: error.message, platform: 'whatsapp' };
  }
};

// Copy analysis summary to clipboard
export const copyToClipboard = async (analysisResult, scenarioData) => {
  const summary = generateShareSummary(analysisResult, scenarioData);
  
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(summary);
      return { success: true, platform: 'clipboard' };
    } else {
      // Fallback for older browsers or non-secure contexts
      const textArea = document.createElement('textarea');
      textArea.value = summary;
      textArea.style.position = 'fixed';
      textArea.style.left = '-999999px';
      textArea.style.top = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);
      
      if (successful) {
        return { success: true, platform: 'clipboard' };
      } else {
        throw new Error('Copy command failed');
      }
    }
  } catch (error) {
    console.error('Clipboard copy failed:', error);
    return { success: false, error: error.message, platform: 'clipboard' };
  }
};

// Generate a shareable link (for future implementation with backend)
export const generateShareableLink = async (analysisResult, scenarioData) => {
  // This would typically involve sending data to backend and getting a shareable URL
  // For now, we'll return a placeholder
  try {
    // In a real implementation, this would make an API call to store the analysis
    // and return a unique shareable URL
    const shareId = Math.random().toString(36).substr(2, 9);
    const shareUrl = `${window.location.origin}/shared/${shareId}`;
    
    // Copy the URL to clipboard
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(shareUrl);
    }
    
    return { 
      success: true, 
      shareUrl, 
      message: 'Shareable link copied to clipboard (Note: This is a demo URL)' 
    };
  } catch (error) {
    console.error('Link generation failed:', error);
    return { success: false, error: error.message };
  }
};

// Share analysis data in JSON format for developers/integrations
export const exportAsJSON = (analysisResult, scenarioData) => {
  const exportData = {
    timestamp: new Date().toISOString(),
    scenario: scenarioData,
    analysis: analysisResult,
    platform: 'ImpactLens',
    version: '1.0'
  };
  
  try {
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = `impactlens_analysis_${scenarioData.brandA || 'brand'}_${scenarioData.brandB || 'partner'}_${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    return { success: true, format: 'json' };
  } catch (error) {
    console.error('JSON export failed:', error);
    return { success: false, error: error.message, format: 'json' };
  }
};
